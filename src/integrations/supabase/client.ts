// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import { Database } from '@/lib/database.types';
import type { User } from '@supabase/supabase-js';

//const SUPABASE_URL = "https://sjzbturfgadikgzokpyo.supabase.co";
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
//const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNqemJ0dXJmZ2FkaWtnem9rcHlvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDcxOTg4OTEsImV4cCI6MjA2Mjc3NDg5MX0.kK73WOJU9iCeSnGuHpcxIAWmxNGfQL8h7h6scXthF_I";
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;
// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  throw new Error('Missing Supabase environment variables');
}

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  }
});

// Create a script to create the super admin user
export const createSuperAdmin = async (password: string) => {
  const email = "super@edufar.co";

  try {
    // First, check if the user already exists by trying to sign in
    const { data: signInData, error: signInError } = await supabase.auth.signInWithPassword({
      email,
      password
    });

    // If sign in succeeds, user exists already with valid credentials
    if (signInData?.user) {
      console.log('Super admin already exists and credentials are valid');
      return { success: true, message: 'Super admin already exists and credentials are valid' };
    }

    // If error is not "Invalid login credentials", it's another issue
    if (signInError && !signInError.message.includes('Invalid login credentials')) {
      console.error('Error checking existing user:', signInError);
      throw signInError;
    }

    // At this point, we either know the user doesn't exist, or their password is wrong
    // Check if the user exists but password is wrong by trying to get their profile
    const { data: existingProfile } = await supabase
      .from('profiles')
      .select('*')
      .eq('email', email)
      .maybeSingle();

    if (existingProfile) {
      return { success: false, message: 'Super admin exists but the password is incorrect' };
    }

    // Try to create the super admin user
    const { data: authData, error: authError } = await supabase.auth.signUp({
      email,
      password,
      options: {
        data: {
          first_name: 'Super',
          last_name: 'Admin',
          role: 'super_admin'
        }
      }
    });

    if (authError) {
      console.error('Auth error during signup:', authError);
      throw authError;
    }

    // The handle_new_user trigger will create the profile, but we need to update the role
    if (authData.user) {
      // Wait a moment for the trigger to create the profile
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // Direct database update to ensure the role is set to super_admin
      const { error: updateError } = await supabase
        .from('profiles')
        .update({ 
          role: 'super_admin', 
          school_id: '00000000-0000-0000-0000-000000000001' 
        })
        .eq('id', authData.user.id);

      if (updateError) {
        console.error('Error updating profile:', updateError);
        throw updateError;
      }

      return { success: true, message: 'Super admin created successfully' };
    }

    return { success: false, message: 'Failed to create super admin' };
    
  } catch (error: any) {
    console.error('Super admin creation error:', error);
    return { success: false, message: error.message || 'An unknown error occurred' };
  }
};

// force update

// force update
